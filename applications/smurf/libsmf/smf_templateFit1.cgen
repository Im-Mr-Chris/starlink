/* -*- C -*-
*+
*  Name:
*     smf_templateFit1<X>

*  Purpose:
*     Low-level routine to fit a 1-d template to data using a gain and offset.

*  Language:
*     Starlink ANSI C

*  Type of Module:
*     Subroutine

*  Invocation:
*     void smf_templateFit1<X>( CGEN_TYPE *data, smf_qual_t *qual,
*                               const unsigned char *mask, const int *lut,
*                               smf_qual_t mask_meas, smf_qual_t mask_cor,
*                               const dim_t n, const dim_t stride,
*                               const double *template, int remove,
*                               int nooffset, double *gain, double *offset,
*                               double *corr, int *status )

*  Arguments:
*     data = CGEN_TYPE* (Given)
*        Pointer to array that contains data to be fit
*     qual = smf_qual_t* (Given)
*        If specified, use this QUALITY array to decide which data samples
*        to use (provided mask). Otherwise data are only ignored if set
*        to VAL__BADD.
*     mask = const unsigned char * (Given)
*        Pointer to a 2D mask of boolean values. May be NULL. If supplied,
*        the mask should have the bounds of the output map. And time
*        samples in "data" that correspond to zero-valued pixels in this
*        mask are excluded from the fitting process.
*     lut = const int * (Given)
*        The index of the corresponding pixel within "mask" for each sample
*        in "data". Only used if "mask" is not NULL.
*     mask_meas = smf_qual_t (Given)
*        Use with qual to define which bits in quality are relevant to
*        ignore data in calculation of template fit.
*     mask_cor = smf_qual_t (Given)
*        Use with qual to define which bits in quality are relevant to
*        ignore data when removing fitted template (see remove flag).
*     n = const dim_t (Given)
*        Number of points in the input data
*     stride = const dim_t (Given)
*        If adjacent data points not stored contiguously, use stride > 1
*     template = const double* (Given)
*        1-d array containing template to be fit (VAL__BADD samples ignored)
*     remove = int (Given)
*        If set, remove the fitted template from data
*     nooffset = int (Given)
*        If set only fit for gain. If offset provided set it to 0.
*     gain = double* (Returned)
*        If provided return the gain of the fit
*     offset = double* (Returned)
*        If provided return the offset of the fit
*     corr = double* (Returned)
*        If provided return linear correlation coeff. (range=-1 to +1)
*     status = int* (Given and Returned)
*        Pointer to global status.

*  Description:
*     This routine fits an array of data points using a 1-d template
*     by solving the maximum-likelihood values of gain and offset in
*     the following expression:
*
*                 data(t) = gain*template(t) + offset
*
*     Setting the remove flag will cause the fitted model to be
*     subtracted from data. In this case, for any sample at which the
*     data and/or template values are VAL__BAD<X>, the value of data
*     at that sample is set to VAL__BAD<X>. On error gain and offset
*     are set to VAL__BADD. The fit fails if there are fewer than 3
*     good samples, in which case status is set to SMF__INSMP.
*
*     The fitter can also return a simplified fit only for the gain if
*     nooffset is set (and the return value for offset will be
*     explicitly set to 0).

*  Notes:

*  Authors:
*     Edward Chapin (UBC)
*     {enter_new_authors_here}

*  History:
*     2008-09-02 (EC):
*        Initial version
*     2008-10-01 (EC):
*        Added quality checking
*     2008-12-12 (EC):
*        Don't set values to BAD if there is no estimate when removing template
*     2008-12-15 (EC):
*        Use two quality masks: one for measuremnt, one for template removal
*     2010-06-01 (EC):
*        Add nooffset parameter
*     2012-02-27 (DSB):
*        Added args "mask" and "lut".
*     {enter_further_changes_here}

*  Copyright:
*     Copyright (C) 2008,2010 University of British Columbia. All Rights
*     Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 3 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public
*     License along with this program; if not, write to the Free
*     Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
*     MA 02110-1301, USA

*  Bugs:
*     {note_any_bugs_here}
*-
*/

/* Standard includes */
#include <stdio.h>
#include <string.h>
#include <math.h>

/* Starlink includes */
#include "sae_par.h"
#include "ast.h"
#include "mers.h"
#include "msg_par.h"
#include "prm_par.h"

/* SMURF includes */
#include "smf.h"
#include "smf_err.h"
#include "smurf_par.h"
#include "smurf_typ.h"

/* Simple default string for errRep */
#define FUNC_NAME "smf_templateFit1"

/* Macro to calculate the reuqired sums, using a generic sample inclusion
   criterion. */
#define FIND_SUMS \
      off = 0; \
      for( i=0; i<n; i++ ) { \
        if( GOOD_VAL && template[i] != VAL__BADD ) { \
          s_d += data[off]; \
          s_dsq += data[off]*data[off]; \
          s_dt += data[off]*template[i]; \
          s_t += template[i]; \
          s_tsq += template[i]*template[i]; \
          ngood ++; \
        } \
        off += stride; \
      } \


void CGEN_FUNCTION(smf_templateFit1)( CGEN_TYPE *data, smf_qual_t *qual,
                                      const unsigned char *mask,
                                      const int *lut, smf_qual_t mask_meas,
                                      smf_qual_t mask_cor, const dim_t n,
                                      const dim_t stride,
                                      const double *template, int remove,
                                      int nooffset, double *gain, double *offset,
                                      double *corr, int *status ) {

  /* Local variables */
  double a;                   /* Gain coefficient */
  double b;                   /* Offset coefficient */
  double c;                   /* Correlation coefficient */
  dim_t off;                 /* offset from loop counter to modified sample */
  dim_t i;                   /* Loop counter */
  dim_t ngood=0;             /* Number of good samples */
  double s_d=0;               /* Sum of the data points */
  double s_dsq=0;             /* Sum of the squares of the data points */
  double s_dt=0;              /* Sum of the data * template */
  double s_t=0;               /* Sum of the template points */
  double s_tsq=0;             /* Sum of the squares of the template points */

  /* Check status */
  if (*status != SAI__OK) return;

  /* Check for valid inputs */
  if( !data ) {
    *status = SAI__ERROR;
    errRep(" ", FUNC_NAME ": possible programming error, data is NULL", status);
    return;
  }

  if( !template ) {
    *status = SAI__ERROR;
    errRep(" ", FUNC_NAME ": possible programming error, template is NULL",
           status);
    return;
  }

  if( !stride ) {
    *status = SAI__ERROR;
    errRep(" ", FUNC_NAME ": stride cannot be 0", status);
    return;
  }

  /* Initialize gain, offset and correlation to bad values */
  if( gain ) *gain = VAL__BADD;
  if( offset ) *offset = VAL__BADD;
  if( corr ) *corr = VAL__BADD;

  /* Find the required sums. First handle cases with no masking */
  if( !mask || !lut ) {
    if( qual ) {  /* QUALITY checking version */
      #define GOOD_VAL ( !(qual[off]&mask_meas) )
      FIND_SUMS
      #undef GOOD_VAL

    } else {      /* VAL__BAD checking version */
      #define GOOD_VAL ( data[off] != CGEN_BAD )
      FIND_SUMS
      #undef GOOD_VAL
    }

  /* Now handle cases with masking */
  } else {
    if( qual ) {  /* QUALITY checking version */
      #define GOOD_VAL ( !(qual[off]&mask_meas) && lut[off] != VAL__BADI && mask[lut[off]] )
      FIND_SUMS
      #undef GOOD_VAL

    } else {      /* VAL__BAD checking version */
      #define GOOD_VAL ( data[off] != CGEN_BAD  && lut[off] != VAL__BADI && mask[lut[off]] )
      FIND_SUMS
      #undef GOOD_VAL
    }
  }


  /* Check for divide-by-zero */
  if( ngood >= 3 ) {
    if( (ngood*s_tsq==s_t*s_t) || (ngood*s_dsq==s_d*s_d) || (s_tsq==0) ) {
      *status = SMF__DIVBZ;
      errRep( "", FUNC_NAME ": divide-by-zero detected", status );
    } else {

      if( nooffset ) {
        /* Calculate gain only */
        a = s_dt/s_tsq;
        b = 0;
        /* Correlation coefficient */
        c = (ngood*a*s_dt - a*s_d*s_t) / ( ngood*a*sqrt(s_tsq)*sqrt(s_dsq) );
      } else {
        /* Calculate gain and offset */
        a = (ngood*s_dt - s_d*s_t) /
          (ngood*s_tsq - s_t*s_t);

        b = (s_d*s_tsq - s_t*s_dt) /
          (ngood*s_tsq - s_t*s_t);

        /* Correlation coefficient */
        c = (ngood*s_dt - s_d*s_t) /
          ( sqrt(ngood*s_tsq - s_t*s_t) * sqrt(ngood*s_dsq - s_d*s_d) );
      }

      /* Return gain, offset and correlation coefficient if requested */
      if( gain ) {
        *gain = a;
      }

      if( offset ) {
        *offset = b;
      }

      if( corr ) {
        /* Trap bollocks */
        if( !isnormal(c) ) {
          *corr = 0;
        } else {
          *corr = c;
        }
      }

      /* Remove fitted templated if requested */
      if( remove ) {
        off = 0;
        if( qual ) {
          for( i=0; i<n; i++ ) {
            if( !(qual[off]&mask_cor) && (template[i] != VAL__BADD) ) {
              data[off] -= (CGEN_TYPE) (a*template[i] + b);
            }
            off += stride;
          }
        } else {
          for( i=0; i<n; i++ ) {
            if( (data[off] != CGEN_BAD) && (template[i] != VAL__BADD) ) {
              data[off] -= (CGEN_TYPE) (a*template[i] + b);
            }
            off += stride;
          }
        }
      }
    }
  } else {
    *status = SMF__INSMP;
    errRep( " ", FUNC_NAME
            ": insufficient good data points (<3) in input arrays", status);
  }
}
