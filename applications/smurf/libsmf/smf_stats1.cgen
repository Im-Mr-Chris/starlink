/* -*- C -*-
*+
*  Name:
*     smf_stats1

*  Purpose:
*     Low-level routine for calculating mean, median and standard
*     deviation of a data array.

*  Language:
*     Starlink ANSI C

*  Type of Module:
*     Subroutine

*  Invocation:
*     void smf_stats1<X>( const CGEN_TYPE *data, dim_t stride, dim_t nsamp,
*                         const smf_qual_t *qual, dim_t qstride,
*                         smf_qual_t mask, double *mean, double *sigma,
*                         double *median, dim_t *ngood, int *status )

*  Arguments:
*     data = const CGEN_TYPE* (Given)
*        Pointer to input data array
*     stride = dim_t (Given)
*        Index stride between elements
*     nsamp = dim_t (Given)
*        Length of the interval to analyze
*     qual = const smf_qual_t* (Given)
*        If specified, use this QUALITY array to decide which samples
*        to use (provided mask). Otherwise data are only ignored if set
*        to CGEN_BAD.
*     qstride = dim_t (Given)
*        Stride for qual. If 0 assumed to be stride.
*     mask = smf_qual_t (Given)
*        Use with qual to define which bits in quality are relevant to
*        ignore data in the calculation.
*     mean = double* (Given and Returned)
*        Pointer to variable that will contain the mean of the data.
*     sigma = double* (Given and Returned)
*        Pointer to variable that will contain the standard deviation of
*        the data. If NULL this routine will run faster and not calculate
*        the standard deviation.
*     median = double* (Given and Returned)
*        Pointer to variable that will contain median of the data. If
*        NULL this routine will not calculate the median and run faster.
*     ngood = dim_t* (Given and Returned)
*        Pointer to variable that will indicate how many samples were used
*        to calculate the statistics.
*     status = int* (Given and Returned)
*        Pointer to global status.

*  Description:
*     Calculate mean and standard deviation provided there is at least
*     1 good sample. If requested, medians are calculated by sorting
*     the data with the system qsort routine and picking off the
*     central value. However, status is set to SMF__INSMP if there are
*     not at least SMF__MINSTATSAMP good samples. If a quality array is
*     supplied but it does not flag bad values, it should be caught by a
*     final check for finite values and bad status will be set.

*  Notes:
*     The median is calculated using the system qsort.  The mean and
*     variance are calculated using the "on-line" algorithm for
*     improved numerical stability over naive algorithms as described
*     at
*     http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#On-line_algorithm
*     This cites D.E. Knuth, 1998, "The Art of Computer Programming,
*     volume 2: Seminumerical Algorithms", 3rd edn., p.232, Boston:
*     Addison-Wesley, and B.P. Welford, 1962, "Note on a method for
*     calculating corrected sums of squares and products",
*     Technometrics 4(3):419-420.

*  Authors:
*     EC: Edward Chapin (UBC)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     DSB: David Berry (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     2008-03-06 (EC):
*        Initial version
*     2008-04-18 (EC):
*        Use SMF__MINSTATSAMP for sample length check
*     2008-08-29 (TIMJ):
*        Initialise return values even if status is bad on entry.
*     2008-12-15 (EC):
*        Remove initial time slice from interface, and add stride parameter.
*     2009-12-03 (EC):
*        Make this a generic function
*     2010-02-04 (EC):
*        Add qstride to interface, and switch to dim_t from dim_t for
*        stride/nsamp
*     2011-06-16 (EC):
*        Add median
*     2011-10-18 (EC):
*        Update to use the "on-line" algorithm to improve numerical stability
*     2014-10-15 (DSB):
*        Prevent divide by zero if count == 1.
*     {enter_further_changes_here}

*  Copyright:
*     Copyright (C) 2008 Science and Technology Facilities Council.
*     Copyright (C) 2008-2011 University of British Columbia.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 3 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public
*     License along with this program; if not, write to the Free
*     Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
*     MA 02110-1301, USA

*  Bugs:
*     {note_any_bugs_here}
*-
*/

/* Standard includes */
#include <math.h>
#include <stdlib.h>

/* Starlink includes */
#include "sae_par.h"
#include "ast.h"
#include "mers.h"
#include "msg_par.h"
#include "prm_par.h"

/* SMURF includes */
#include "smf.h"
#include "smurf_par.h"
#include "smurf_typ.h"
#include "libsmf/smf_err.h"

/* Local comparison function for sorting -------------------------------------*/

/* Since this is a generic function we need the #ifndef to avoid re-defining
   the function for each data type */

#ifndef SMFSTATS1COMPARE_DEFINED
#define SMFSTATS1COMPARE_DEFINED

int smfStats1Compare( const void *arg1, const void *arg2 );

int smfStats1Compare( const void *arg1, const void *arg2 ) {
  double diff;
  const double *d1 = arg1;
  const double *d2 = arg2;

  diff = *d1 - *d2;
  return (diff < 0) ? -1 : (diff == 0) ? 0 : 1;
}
#endif

/* Main function -------------------------------------------------------------*/

/* Simple default string for errRep */
#define FUNC_NAME "smf_stats1"

void CGEN_FUNCTION(smf_stats1)( const CGEN_TYPE *data, dim_t stride,
                                dim_t nsamp, const smf_qual_t *qual,
                                dim_t qstride, smf_qual_t mask, double *mean,
                                double *sigma, double *median, dim_t *ngood,
                                int *status ) {

  /* Local variables */
  dim_t count=0;             /* Number of samples in estimate */
  double delta;               /* Work variable for variance */
  int failed=0;               /* Flag indicating that we failed */
  dim_t i;                   /* Loop counter */
  dim_t j;                   /* Loop counter */
  double mu=0;                /* Estimate of the mean */
  double m2=0;                /* Work variable for variance */

  /* initialise return values */
  if (sigma) *sigma = VAL__BADD;
  if (ngood) *ngood = 0;
  if (mean) *mean = VAL__BADD;
  if (median) *median = VAL__BADD;

  /* Check status */
  if (*status != SAI__OK) return;

  if( !data ) {
    *status = SAI__ERROR;
    errRep( "", FUNC_NAME ": NULL data supplied", status );
    return;
  }

  if( !stride ) {
    *status = SAI__ERROR;
    errRep(" ", FUNC_NAME ": stride cannot be 0", status);
    return;
  }

  /* Assume qstride = stride if not specified */
  if( !qstride ) {
    qstride = stride;
  }

  /* Initialization */
  if( qual ) {
    /* Quality checking version */

    if( sigma ) {
      /* Standard deviation + mean calculating version */
      j = 0;
      for( i=0; i<nsamp*stride; i+=stride ) {
        if( !(qual[j] & mask) ) {
          count++;
          delta = (double) data[i] - mu;
          mu += delta / (double) count;
          m2 += delta * ((double) data[i] - mu);
        }
        j += qstride;
      }
    } else {
      /* Always calculate mean... even if we're only asking for the
         median we only have to count the number of good samples here,
         and the calculation is fast compared to sorting to get the
         median. */
      j = 0;
      for( i=0; i<nsamp*stride; i+=stride ) {
        if( !(qual[j] & mask) ) {
          mu += (double) data[i];
          count++;
        }
        j += qstride;
      }

      if( count > 0 ) {
        mu /= (double) count;
      } else {
        mu = CGEN_BAD;
      }
    }

    /* Median calculation is independent of mean / standard deviation except
       that we know how many good values there are from the mean calculation */
    if( median && count) {
      double *sortbuf=NULL;

      /* Put all of the good values into a buffer that we can sort */
      sortbuf = astCalloc( count, sizeof(*sortbuf) );

      if( *status == SAI__OK ) {
        dim_t index = 0;

        j = 0;
        for( i=0; i<nsamp*stride; i+=stride ) {
          if( !(qual[j] & mask) ) {
            sortbuf[index] = (double) data[i];
            index++;
          }
          j += qstride;
        }

        /* Sort the buffer */
        qsort( sortbuf, count, sizeof(*sortbuf), smfStats1Compare );

        /* Set the median to the central value */
        *median = sortbuf[index/2];
      }

      /* Clean up */
      if( sortbuf ) sortbuf = astFree( sortbuf );
    }

  } else {
    /* CGEN_BAD checking version */
    if( sigma ) {
      /* Standard deviation calculating version */
      for( i=0; i<nsamp*stride; i+=stride ) if( data[i] != CGEN_BAD ) {
          count++;
          delta = (double) data[i] - mu;
          mu += delta / (double) count;
          m2 += delta * ((double) data[i] - mu);
        }
    } else {
      /* Mean only */
      for( i=0; i<nsamp*stride; i+=stride ) if( data[i] != CGEN_BAD ) {
          mu += (double) data[i];
          count++;
        }

      if( count > 0 ) {
        mu /= (double) count;
      } else {
        mu = CGEN_BAD;
      }
    }

    /* Median calculation */
    if( median && count) {
      double *sortbuf=NULL;

      /* Put all of the good values into a buffer that we can sort */
      sortbuf = astCalloc( count, sizeof(*sortbuf) );

      if( *status == SAI__OK ) {
        dim_t index = 0;
        for( i=0; i<nsamp*stride; i+=stride ) {
          if( data[i] != CGEN_BAD ) {
            sortbuf[index] = (double) data[i];
            index++;
          }
        }

        /* Sort the buffer */
        qsort( sortbuf, count, sizeof(*sortbuf), smfStats1Compare );

        /* Set the median to the central value */
        *median = sortbuf[index/2];
      }

      /* Clean up */
      if( sortbuf ) sortbuf = astFree( sortbuf );
    }

  }

  /* Trap junk values: this can happen if the user provided a quality
     array that missed some bad values. */
  if( median && !isfinite(*median) ) {
    *median = CGEN_BAD;
    failed = 1;
  }

  if( !isfinite(mu) || !isfinite(mu) ) {
    failed = 1;
  }

  if( failed ) {
    count = 0;
    *status = SAI__ERROR;
    errRep( "", FUNC_NAME ": programming error, non-finite value ecountered",
            status );
  }

  /* Calculate numbers if possible */
  if( mean && count > 0 ) *mean = mu;
  if( sigma && count > 1 ) {
    double variance = m2 / ((double) count - 1);
    *sigma = sqrt( variance );
  }

  if( ngood ) *ngood = count;

  /* Enough samples? */
  if( (*status == SAI__OK) && (count < SMF__MINSTATSAMP) ) {
    *status = SMF__INSMP;
    msgSeti("MIN",SMF__MINSTATSAMP);
    msgSetk("N", count );
    msgSetk("MX", nsamp );
    errRep( "", FUNC_NAME
            ": Insufficient number of good samples (^N<^MIN out of ^MX) for "
            "statistics", status );
  }

}


